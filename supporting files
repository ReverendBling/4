/////////////////////////////////////////////////////////////////////////////////////
display.h
#define  ENV_WIDTH       740
#define  ENV_HEIGHT      540
// These are the external functions being used by the test program
extern void initializeWindow() ;
extern void closeWindow();
extern void displayEnvironment(Environment *);
///////////////////////////////////////////////////////////////////////////////////
gridMaker.c
#include <stdio.h>
#include <stdlib.h>
#include "obstacles.h"
#include "display.h"
// This is a helper function that determines whether or not line segment (v1---v2) intersects line segment (v3---v4)
unsigned char linesIntersect(short v1x, short v1y, short v2x, short v2y, short v3x, short v3y, short v4x, short v4y) {
      float uA = ((v4x-v3x)*(v1y-v3y) - (v4y-v3y)*(v1x-v3x)) / (float)(((v4y-v3y)*(v2x-v1x) - (v4x-v3x)*(v2y-v1y)));
      float uB = ((v2x-v1x)*(v1y-v3y) - (v2y-v1y)*(v1x-v3x)) / (float)(((v4y-v3y)*(v2x-v1x) - (v4x-v3x)*(v2y-v1y)));
      // If uA and uB are between 0-1, there is an intersection
      if (uA > 0 && uA < 1 && uB > 0 && uB < 1)
   	 return 1;
    return 0;
}
// Create a grid of vertices with a horizontal and vertical gap between them of env->gridSize pixels
void createGrid(Environment *env) {
}
// This function removes all vertices that are invalid (i.e., inside an obstacle).
void removeInvalidVertices(Environment *env) {
}
// Add diagonal edges to the graph, assuming that they don't intersect an obstacle
void addCrossEdges(Environment *env) {
}
// This procedure cleans up everything by creeing all alocated memory
void cleanupEverything(Environment *env) {
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
display.c
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <X11/Xlib.h>
#include "obstacles.h"
#include "display.h"
#define  VERTEX_RADIUS   5
const int   OBSTACLE_COLOR = 0x7799FF;
const int   BORDER_COLOR = 0x000000;
const int   EDGE_COLOR = 0x000000;
const int   SELECTED_COLOR = 0xDD0000;
const int   VERTEX_COLOR = 0xDD0000;
//Display-related variables
Display *display;
Window   win;
GC       gc;
// Initialize and open the simulator window with size ENV_WIDTH x ENV_HEIGHT.
void initializeWindow() {
  // Open connection to X server
  display = XOpenDisplay(NULL);
  // Create a simple window, set the title and get the graphics context then
  // make is visible and get ready to draw
  win = XCreateSimpleWindow(display,  RootWindow(display, 0), 0, 0,
   		     ENV_WIDTH, ENV_HEIGHT, 0, 0x000000, 0xFFFFFF);
  XStoreName(display, win, "Path Maker");
  gc = XCreateGC(display, win, 0, NULL);
  XMapWindow(display, win);
  XFlush(display);
  usleep(20000);  // sleep for 20 milliseconds.
}
// Close the display window
void closeWindow() {
  XFreeGC(display, gc);
  XUnmapWindow(display, win);
  XDestroyWindow(display, win);
  XCloseDisplay(display);
}
// Redraw all the obstacles and the edges and the vertices
void displayEnvironment(Environment *env) {
    Vertex    *v = NULL;
    Neighbour *n = NULL;    
    // Erase the background 
    XSetForeground(display, gc, 0xFFFFFF);
    XFillRectangle(display, win, gc, 0, 0, ENV_WIDTH, ENV_HEIGHT);
    // Draw all the obstacles
    for (int i=0; i<env->numObstacles; i++) {
   	 XSetForeground(display, gc, OBSTACLE_COLOR);
   	 XFillRectangle(display, win, gc, env->obstacles[i].x,ENV_HEIGHT-env->obstacles[i].y, 
   					 env->obstacles[i].w, env->obstacles[i].h);
   	 XSetForeground(display, gc, BORDER_COLOR);
   	 XDrawRectangle(display, win, gc, env->obstacles[i].x,ENV_HEIGHT-env->obstacles[i].y, 
   					 env->obstacles[i].w, env->obstacles[i].h);
    }
    // Draw all the edges
    XSetForeground(display, gc, EDGE_COLOR);
    v = env->firstVertex;
    while (v != NULL) {
   	 n = v->firstNeighbour;
   	 while (n != NULL) {
   		 XDrawLine(display, win, gc, v->x, ENV_HEIGHT-(v->y), n->vertex->x, ENV_HEIGHT-(n->vertex->y));
   		 n = n->next;
   	 }
   	 v = v->nextVertex;
    }
  // Draw all the vertices
    v = env->firstVertex;
    while(v != NULL) {
   	 XSetForeground(display, gc, VERTEX_COLOR);
   	 XFillArc(display, win, gc, v->x-VERTEX_RADIUS, ENV_HEIGHT-(v->y+VERTEX_RADIUS),
   			  2*VERTEX_RADIUS, 2*VERTEX_RADIUS, 0, 360*64);
   	 XSetForeground(display, gc, BORDER_COLOR);
   	 XDrawArc(display, win, gc, v->x-VERTEX_RADIUS, ENV_HEIGHT-(v->y+VERTEX_RADIUS),
   			  2*VERTEX_RADIUS, 2*VERTEX_RADIUS, 0, 360*64);
   	 v = v->nextVertex;
    }
    XFlush(display);
    usleep(2000);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gridTester.c
#include <stdio.h>
#include <stdlib.h>
#include "obstacles.h"
#include "display.h"
// This program should take in two command-line arguments 
// which are (1) the gap (in pixels) between grid rows and columns
// and (2) the emvironment to run (1 to 5).
// It will then create a grid of vertices and connect adjacent
// & diagonal ones to form a graph that can be traversed to 
// move around the environment without coliding with obstacles.
int main(int argc, char *argv[]) {
      Environment   environment;
      char   	   environmentNumber;     
    /*******************************************************************************************/
      /* Replace the two lines below with numbers that are read in from command line arguments */
    /*******************************************************************************************/
      environmentNumber = 1;
    environment.gridSize = 50;  
   /********************************************************/
    /* YOU MUST NOT CHANGE ANY CODE BENEATH THIS COMMENT !! */
    /********************************************************/
    // Open a window for display
    initializeWindow();
    // Initialize the environment and add some obstacles
    short int *xsp, *ysp, *wsp, *hsp;
    switch (environmentNumber) {
   	 case 1: {
   		 short xs[] = {  0,  20, 720,  20, 120, 280, 580, 320,  80};
   		 short ys[] = {540, 540, 540,  20, 460, 420, 340, 280, 300};
   		 short ws[] = { 20, 700,  20, 700,  60, 220,  60,  40, 160};
   		 short hs[] = {540,  20, 540,  20,  80, 100, 200, 180, 110};
   		 xsp = xs; ysp = ys, wsp = ws, hsp = hs;
   		 environment.numObstacles = 9;
   		 break; }
   	 case 2: {
   		 short xs[] = {  0,  20, 720,  20,  60, 200, 355, 600, 120, 280};
   		 short ys[] = {540, 540, 540,  20, 480, 400, 480, 200, 200, 240};
   		 short ws[] = { 20, 700,  20, 700, 385, 480,  35,  20,  20,  40};
   		 short hs[] = {540,  20, 540,  20,  30,  45, 225,  20,  20, 220};
   		 xsp = xs; ysp = ys, wsp = ws, hsp = hs;
   		 environment.numObstacles = 10;
   		 break; }
   	 case 3: {
   		 short xs[] = {  0,  20, 720,  20,  20, 500, 480, 180, 360,  80};
   		 short ys[] = {540, 540, 540,  20, 520, 520, 160, 200, 480, 260};
   		 short ws[] = { 20, 700,  20, 700, 100, 220, 140,  50,   2, 400};
   		 short hs[] = {540,  20, 540,  20, 100, 160,  50, 130, 400,   2};
   		 xsp = xs; ysp = ys, wsp = ws, hsp = hs;
   		 environment.numObstacles = 10;
   		 break; }
   	 case 4: {
   		 short xs[14*10+4] = {  0,  20, 720,  20};
   		 short ys[14*10+4] = {540, 540, 540,  20};
   		 short ws[14*10+4] = { 20, 700,  20, 700};
   		 short hs[14*10+4] = {540,  20, 540,  20};
   		 for (int i=0; i<14; i++)
   			 for (int j=0; j<10; j++) {
   				 xs[i*10+j+4] = 50*(i+1);
   				 ys[i*10+j+4] = 50*(j+1);
   				 ws[i*10+j+4] = 20;
   				 hs[i*10+j+4] = 20;
   			 }
   		 xsp = xs; ysp = ys, wsp = ws, hsp = hs;
   		 environment.numObstacles = 4+14*10;
   		 break; }
   	 case 5: {
   		 short xs[] = {  0,  20, 720,  20,  70};
   		 short ys[] = {540, 540, 540,  20, 470};
   		 short ws[] = { 20, 700,  20, 700, 600};
   		 short hs[] = {540,  20, 540,  20, 400};
   		 xsp = xs; ysp = ys, wsp = ws, hsp = hs;
   		 environment.numObstacles = 5;
   		 break; }
   	 default:
   		 environment.numObstacles = 0;
    }
    environment.obstacles = (Obstacle *)malloc(environment.numObstacles*sizeof(Obstacle));
    for (int i=0; i<environment.numObstacles; i++) {
   	 environment.obstacles[i].x = xsp[i];
   	 environment.obstacles[i].y = ysp[i];
   	 environment.obstacles[i].w = wsp[i];
   	 environment.obstacles[i].h = hsp[i];
    }
    environment.firstVertex = NULL;
    displayEnvironment(&environment); getchar(); // Display the environment then wait for user to press ENTER
// Create the vertices
    createGrid(&environment);
    displayEnvironment(&environment); getchar(); // Display the environment then wait for user to press ENTER
    // Remove invalid vertices
    removeInvalidVertices(&environment);    
    displayEnvironment(&environment); getchar(); // Display the environment then wait for user to press ENTER
    // Add Cross Edges
    addCrossEdges(&environment);
    displayEnvironment(&environment); getchar(); // Display the environment then wait for user to press ENTER
    // Cleanup by freeing all allocated memory
    cleanupEverything(&environment);
    // Close the environment window
    closeWindow();
}
//////////////////////////////////////////////////////////////
obstacles.h
// This represents a rectangular obstacle
typedef struct obst {
    short        x;
    short        y; 
    short        w;
    short        h;
} Obstacle;

// This represents a vertex of the graph
typedef struct vert {
    short          x;
    short          y;
    struct neigh  *firstNeighbour;
    struct neigh  *lastNeighbour;
    struct vert   *nextVertex;
} Vertex;
// This represents a neighbour of a vertex in the graph
typedef struct neigh {
    Vertex        *vertex;
    struct neigh  *next;
} Neighbour;
// This represents an environment
typedef struct {
    Obstacle   *obstacles;
    short       numObstacles;
    Vertex     *firstVertex;
    int   		 gridSize;
} Environment;
    
// These are the external functions being used by the test program
extern void createGrid(Environment *);
extern void removeInvalidVertices(Environment *);
extern void addCrossEdges(Environment *);
extern void cleanupEverything(Environment *);
